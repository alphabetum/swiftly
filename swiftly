#!/usr/bin/env bash
#                  _______________________
# __________      ____(_)__  __/_  /___  /____  __
# __  ___/_ | /| / /_  /__  /_ _  __/_  /__  / / /
# _(__  )__ |/ |/ /_  / _  __/ / /_ _  / _  /_/ /
# /____/ ____/|__/ /_/  /_/    \__/ /_/  _\__, /
#                                        /____/
# Swiftly
#
# Transparent compilation for Swift command line scripts / programs.
#
# When used to run swift command line programs, swiftly compiles the program,
# saves the binary to a cache directory, and then calls the binary. On
# subsequent runs, the binary is called instead of using the REPL.
#
# Binaries are stored in subdirectories at `$HOME/.swiftly/cache/`, which is
# created when `swiftly` is called for the first time. Each binary gets it
# own directory, with a subdirectory set to the last modified timestamp of the
# source file, and a binary name set to the original executable name so
# internal references to the executable name work properly. The resulting final
# directory structure is:
#
#     $HOME/.swiftly/cache/executable_filenename/last_modified_timestamp/executable_filenename
#
# William Melody, 2014
# https://github.com/alphabetum/swiftly/


#==========================================================================
# Functions
#==========================================================================

# Check whether a program exists in the PATH
#
# For information on why `which` is not being used, see:
# http://stackoverflow.com/a/677212
function program_exists() {
  hash $1 2>/dev/null
}

# Execute swiftc with the `macosx` sdk
function compile_swift() {
  [ -z "$1" ] && echo "compile_swift(): output path not specified"
  [ -z "$2" ] && echo "compile_swift(): Source path not specified"
  /usr/bin/env xcrun -sdk macosx swiftc -o $1 $2
}

# remove all but the most recent binary folder for a given program cache path.
function cleanup_swiftly_binaries_in () {
 [ -z "$1" ] && exit 1
  cd $1
  number_of_files="$(ls -1 | wc -l | tr -d ' ')"
  if [ "$number_of_files" -gt "1" ]; then
    (ls -t|head -n 1;ls)|sort|uniq -u|sed -e 's,.*,"&",g'|xargs rm -r
  fi
}

#==========================================================================
# swift
#==========================================================================

swift_original=/usr/bin/swift

#==========================================================================
# Swiftly directory
#
# .swiftly directory in the $HOME
#==========================================================================

# set the swiftly directory
swiftly_directory=$HOME/.swiftly

# if swiftly directory doesn't exist, create it.
if [ ! -d $swiftly_directory ]; then
  mkdir $swiftly_directory
fi

#==========================================================================
# cache directory
#
# cache directory that contains all the compiled binaries
#==========================================================================

# set the swifly cache directory, which holds the binary files.
cache_dir="$swiftly_directory/cache"

# if cache directory doesn't exist, create it.
if [ ! -d $cache_dir ]; then
  mkdir $cache_dir
fi

#==========================================================================
# Help
#==========================================================================

read -r -d '' usage <<- EOM
Usage: swiftly program ...

Transparent compilation for Swift scripts.

Use as shebang in swift script to transparently compile and store binary in a
cached location.

Example shebang:
  !#/usr/bin/env swiftly
EOM


# Print usage information for both swiftly and swift if passed `-h` flag
if [ "$1" == "-h" ]; then
  echo "$usage"
  echo ""
  echo "-------------------------------------------------------------------"
  echo ""
  $swift_original -h
  exit 1
fi

# if there is no first argument, call `swift`, aka, launch the Swift REPL
if [ -z "$1" ]; then
  $swift_original
  exit 1
fi

#==========================================================================
# program variables
#==========================================================================

program=$1
program_basename=$(basename $program)
program_timestamp=$(stat -f '%m' $program)
program_arguments=${*:2}

# if the calling program doesn't exist, print usage info and exit.
if ! program_exists $program_basename; then
  $swift_original $program_arguments
  exit 1
fi

#==========================================================================
# program variables
#==========================================================================

binary_program_dir="$cache_dir/$program_basename"
binary_dir="$binary_program_dir/$program_timestamp"
binary_filename="$program_basename"
binary_path="$binary_dir/$binary_filename"

#==========================================================================
# program variables
#==========================================================================


if [ ! -f $binary_path ]; then
  if [ ! -d $binary_dir ]; then
    mkdir -p $binary_dir
  fi

  compile_swift $binary_path $program && $(cleanup_swiftly_binaries_in "$binary_program_dir")
fi

#==========================================================================
# run
#==========================================================================

# call the compiled binary
$binary_path $program_arguments


